/* stylelint-disable custom-property-empty-line-before */
/* stylelint-disable custom-property-pattern */

/*
  Version 4:
  ==========
  - Makes use of the dark / light (default / alternate) designs
  - Assuming dark / light variables would be abstracted to a 'theme' so that the component doesn't need logic depeneding on the theme
    e.g.:
      --rpl-theme-foreground: var(--rpl-light-foreground);
      --rpl-theme-background: var(--rpl-light-background);
  - Has locally scoped variables for this component
    - This means not all styles are setup on the primary variant, e.g. text colour on hover
    - Can simply override variables between variants, don't need to set styles including active states etc inside each variant
*/

@import './global.css';

.rpl-button {
  /* Local variables */
  --rpl-button-text-colour: var(--rpl-theme-foreground);
  --rpl-button-text-colour--hover: var(--rpl-theme-foreground);
  --rpl-button-text-colour--active: var(--rpl-theme-foreground);

  --rpl-button-background-colour: var(--rpl-theme-background);
  --rpl-button-background-colour--hover: var(--rpl-theme-background--lighter);
  --rpl-button-background-colour--active: var(--rpl-theme-background--darker);

  --rpl-button-border-colour: transparent;
  --rpl-button-border-colour--hover: transparent;
  --rpl-button-border-colour--active: transparent;

  /* Base styles */
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1.4rem 2rem;
  font-weight: bold;
  font-size: 1.6rem;
  line-height: 1;
  color: var(--rpl-button-text-colour);
  background-color: var(--rpl-button-background-colour);
  border-width: 0.2rem;
  border-style: solid;
  border-color: var(--rpl-button-border-colour);
  border-radius: 0.4rem;

  /* States */
  &:hover {
    cursor: pointer;
    text-decoration: underline;
    color: var(--rpl-button-text-colour--hover);
    background-color: var(--rpl-button-background-colour--hover);
    border-color: var(--rpl-button-border-colour--hover);
  }

  &:active,
  &:active:hover {
    cursor: default;
    color: var(--rpl-button-text-color--active);
    background-color: var(--rpl-button-background-colour--active);
    border-color: var(--rpl-button-border-colour--active);
  }

  /* Variants */
  &--secondary {
    --rpl-button-text-colour: var(--rpl-theme-background);
    --rpl-button-background-colour: transparent;
    --rpl-button-border-colour: var(--rpl-theme-background);

    &:hover {
      --rpl-button-text-colour--hover: var(--rpl-theme-background--lighter);
      --rpl-button-background-colour--hover: transparent;
      --rpl-button-border-colour--hover: var(--rpl-theme-background--lighter);
    }

    &:active,
    &:active:hover {
      --rpl-button-text-colour--active: var(--rpl-theme-background--darker);
      --rpl-button-background-colour--active: transparent;
      --rpl-button-border-colour--active: var(--rpl-theme-background--darker);
    }
  }

  &--tertiary {
    --rpl-button-text-colour: black;
    --rpl-button-background-colour: transparent;
    --rpl-button-border-colour: transparent;

    &:hover {
      --rpl-button-text-colour--hover: var(--rpl-theme-background);
      --rpl-button-background-colour--hover: transparent;
      --rpl-button-border-colour--hover: transparent;
    }

    &:active,
    &:active:hover {
      --rpl-button-text-colour--active: black;
      --rpl-button-background-colour--active: transparent;
      --rpl-button-border-colour--active: transparent;
    }
  }
}
